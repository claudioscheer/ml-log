{"version":3,"sources":["services/EventEmitter.js","services/ApplicationRedisSingleton.js","components/Plots.js","App.js","reportWebVitals.js","index.js"],"names":["eventEmitter","this","_events","name","listener","push","listenerToRemove","filter","data","forEach","callback","applicationRedisSingleton","applicationName","localStorage","getItem","redisHost","redisPort","redisDatabaseIndex","getAllPlots","a","fetch","config","endpoint","URLSearchParams","request","json","PlotsRoute","useState","plots","setPlots","useEffect","refreshPlots","allPlots","on","Grid","container","spacing","map","x","i","item","md","lg","items","z","y","type","mode","layout","title","key","theme","createMuiTheme","palette","primary","main","blueGrey","useStyles","makeStyles","root","display","appBar","zIndex","drawer","width","flexShrink","drawerPaper","drawerContainer","overflow","padding","content","flexGrow","App","classes","setApplicationName","setRedisHost","setRedisPort","setRedisDatabaseIndex","setInterval","emit","ThemeProvider","className","CssBaseline","AppBar","position","Toolbar","Typography","variant","Tooltip","IconButton","color","onClick","Drawer","paper","TextField","label","value","onChange","e","target","setItem","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.de92891f.chunk.js","sourcesContent":["class EventEmitter {\n    constructor() {\n        this._events = {};\n    }\n\n    on(name, listener) {\n        if (!this._events[name]) {\n            this._events[name] = [];\n        }\n        this._events[name].push(listener);\n    }\n\n    removeListener(name, listenerToRemove) {\n        if (!this._events[name]) {\n            return;\n        }\n        const filterListeners = (listener) => listener !== listenerToRemove;\n        this._events[name] = this._events[name].filter(filterListeners);\n    }\n\n    emit(name, data) {\n        if (!this._events[name]) {\n            return;\n        }\n        const fireCallbacks = (callback) => {\n            callback(data);\n        };\n        this._events[name].forEach(fireCallbacks);\n    }\n}\n\nconst eventEmitter = new EventEmitter();\nexport default eventEmitter;\n","class ApplicationRedisSingleton {\n    applicationName;\n    redisHost;\n    redisPort;\n    redisDatabaseIndex;\n\n    constructor() {\n        this.applicationName =\n            localStorage.getItem('mlLogApplicationName') || '';\n        this.redisHost = localStorage.getItem('mlLogRedisHost') || '';\n        this.redisPort = localStorage.getItem('mlLogRedisPort') || 0;\n        this.redisDatabaseIndex =\n            localStorage.getItem('mlLogRedisDatabaseIndex') || 0;\n    }\n}\n\nconst applicationRedisSingleton = new ApplicationRedisSingleton();\nexport default applicationRedisSingleton;\n","import React, { useEffect, useState } from 'react';\nimport Plot from 'react-plotly.js';\nimport { Grid } from '@material-ui/core';\nimport applicationRedisSingleton from '../services/ApplicationRedisSingleton';\nimport eventEmitter from '../services/EventEmitter';\nimport config from '../config.json';\n\nasync function getAllPlots() {\n    try {\n        let request = await fetch(\n            `${config.endpoint}/api/query/xy-items?` +\n                new URLSearchParams({\n                    applicationName: applicationRedisSingleton.applicationName,\n                    redisHost: applicationRedisSingleton.redisHost,\n                    redisPort: applicationRedisSingleton.redisPort,\n                    redisDatabaseIndex:\n                        applicationRedisSingleton.redisDatabaseIndex,\n                }),\n        );\n\n        const data = await request.json();\n        return data;\n    } catch (e) {\n        return [];\n    }\n}\n\nfunction PlotsRoute() {\n    const [plots, setPlots] = useState([]);\n\n    useEffect(() => {\n        const refreshPlots = async () => {\n            const allPlots = await getAllPlots();\n            setPlots(allPlots);\n        };\n        refreshPlots();\n        eventEmitter.on('refresh-plots', () => {\n            refreshPlots();\n        });\n    }, []);\n\n    return (\n        <div>\n            <Grid container spacing={3}>\n                {plots.map((x, i) => {\n                    return (\n                        <Grid item md={12} lg={6} key={i}>\n                            <Plot\n                                data={[\n                                    {\n                                        x: x.items.map((z) => z.x),\n                                        y: x.items.map((z) => z.y),\n                                        type: 'scatter',\n                                        mode: 'lines+markers',\n                                    },\n                                ]}\n                                layout={{ title: x.key }}\n                            />\n                        </Grid>\n                    );\n                })}\n            </Grid>\n        </div>\n    );\n}\n\nexport default PlotsRoute;\n","import React, { useState, useEffect } from 'react';\nimport {\n    TextField,\n    Drawer,\n    CssBaseline,\n    AppBar,\n    Toolbar,\n    Typography,\n    IconButton,\n    Tooltip,\n} from '@material-ui/core';\nimport {\n    makeStyles,\n    createMuiTheme,\n    ThemeProvider,\n} from '@material-ui/core/styles';\nimport { blueGrey } from '@material-ui/core/colors';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport eventEmitter from './services/EventEmitter';\nimport applicationRedisSingleton from './services/ApplicationRedisSingleton';\nimport PlotsRoute from './components/Plots';\nimport './styles/App.css';\n\nconst drawerWidth = 240;\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: blueGrey[900],\n        },\n    },\n});\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n    },\n    appBar: {\n        zIndex: theme.zIndex.drawer + 1,\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: drawerWidth,\n    },\n    drawerContainer: {\n        overflow: 'auto',\n        padding: theme.spacing(2),\n    },\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n    },\n    title: {\n        flexGrow: 1,\n    },\n}));\n\nfunction App() {\n    const classes = useStyles();\n\n    const [applicationName, setApplicationName] = useState(\n        applicationRedisSingleton.applicationName,\n    );\n    const [redisHost, setRedisHost] = useState(\n        applicationRedisSingleton.redisHost,\n    );\n    const [redisPort, setRedisPort] = useState(\n        applicationRedisSingleton.redisPort,\n    );\n    const [redisDatabaseIndex, setRedisDatabaseIndex] = useState(\n        applicationRedisSingleton.redisDatabaseIndex,\n    );\n\n    useEffect(() => {\n        setInterval(() => {\n            eventEmitter.emit('refresh-plots', {});\n        }, 2000);\n    });\n\n    return (\n        <ThemeProvider theme={theme}>\n            <div className={classes.root}>\n                <CssBaseline />\n                <AppBar position=\"fixed\" className={classes.appBar}>\n                    <Toolbar>\n                        <Typography variant=\"h6\" className={classes.title}>\n                            ml-log\n                        </Typography>\n                        <Tooltip title=\"Refresh plots\">\n                            <IconButton\n                                color=\"inherit\"\n                                onClick={() => {\n                                    eventEmitter.emit('refresh-plots', {});\n                                }}\n                            >\n                                <RefreshIcon />\n                            </IconButton>\n                        </Tooltip>\n                    </Toolbar>\n                </AppBar>\n                <Drawer\n                    className={classes.drawer}\n                    variant=\"permanent\"\n                    classes={{\n                        paper: classes.drawerPaper,\n                    }}\n                >\n                    <Toolbar />\n                    <div className={classes.drawerContainer}>\n                        <TextField\n                            label=\"Application Name\"\n                            variant=\"outlined\"\n                            value={applicationName}\n                            onChange={(e) => {\n                                setApplicationName(e.target.value);\n                                applicationRedisSingleton.applicationName =\n                                    e.target.value;\n                                localStorage.setItem(\n                                    'mlLogApplicationName',\n                                    e.target.value,\n                                );\n                            }}\n                        />\n                        <br />\n                        <br />\n                        <TextField\n                            label=\"Redis Host\"\n                            variant=\"outlined\"\n                            value={redisHost}\n                            onChange={(e) => {\n                                setRedisHost(e.target.value);\n                                applicationRedisSingleton.redisHost =\n                                    e.target.value;\n                                localStorage.setItem(\n                                    'mlLogRedisHost',\n                                    e.target.value,\n                                );\n                            }}\n                        />\n                        <br />\n                        <br />\n                        <TextField\n                            label=\"Redis Port\"\n                            variant=\"outlined\"\n                            value={redisPort}\n                            onChange={(e) => {\n                                setRedisPort(e.target.value);\n                                applicationRedisSingleton.redisPort =\n                                    e.target.value;\n                                localStorage.setItem(\n                                    'mlLogRedisPort',\n                                    e.target.value,\n                                );\n                            }}\n                        />\n                        <br />\n                        <br />\n                        <TextField\n                            label=\"Redis Database Index\"\n                            variant=\"outlined\"\n                            value={redisDatabaseIndex}\n                            onChange={(e) => {\n                                setRedisDatabaseIndex(e.target.value);\n                                applicationRedisSingleton.redisDatabaseIndex =\n                                    e.target.value;\n                                localStorage.setItem(\n                                    'mlLogRedisDatabaseIndex',\n                                    e.target.value,\n                                );\n                            }}\n                        />\n                    </div>\n                </Drawer>\n                <main className={classes.content}>\n                    <Toolbar />\n                    <Router>\n                        <Switch>\n                            <Route path=\"/\" exact component={PlotsRoute} />\n                        </Switch>\n                    </Router>\n                </main>\n            </div>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            },\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nreportWebVitals(console.log);\n"],"sourceRoot":""}